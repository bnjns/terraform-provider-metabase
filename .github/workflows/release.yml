name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

permissions:
  contents: write

jobs:
  release-notes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Generate Release Notes
        run: sed -n -e "1{/# /d;}" -e "2{/^$/d;}" -e "/# $(git describe --abbrev=0 --exclude="$(git describe --abbrev=0 --match='v*.*.*' --tags)" --match='v*.*.*' --tags | tr -d v)/q;p" CHANGELOG.md > release-notes.txt
      - uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.txt
          retention-days: 1
  terraform-provider-release:
    needs: [ release-notes ]
    uses: hashicorp/ghaction-terraform-provider-release/.github/workflows/community.yml@v2
    secrets:
      gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
      gpg-private-key-passphrase: ${{ secrets.GPG_PASSPHRASE }}
    with:
      release-notes: true
      setup-go-version: '1.17.x'
  highest-version-tag:
    needs: [ terraform-provider-release ]
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.highest-version-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Output highest version tag
        id: highest-version-tag
        run: |
          HIGHEST=$(git tag | sort -V | tail -1)
          echo ::set-output name=tag::$HIGHEST
  changelog-newversion:
    needs: [ terraform-provider-release, highest-version-tag ]
    if: github.ref_name == needs.highest-version-tag.outputs.tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: Update Changelog Header
        run: |
          CHANGELOG_FILE_NAME="CHANGELOG.md"
          PREVIOUS_RELEASE_TAG=${{ github.ref_name }}
          # Add Release Date
          RELEASE_DATE=`date +%B' '%e', '%Y`
          sed -i -e "1 s/Unreleased/$RELEASE_DATE/" $CHANGELOG_FILE_NAME
          # Prepend next release line
          echo Previous release is: $PREVIOUS_RELEASE_TAG
          NEW_RELEASE_LINE=$(echo $PREVIOUS_RELEASE_TAG | awk -F. '{
              $1 = substr($1,2)
              $2 += 1
              printf("%s.%01d.0\n\n", $1, $2);
          }')
          echo New minor version is: v$NEW_RELEASE_LINE
          echo -e "## $NEW_RELEASE_LINE (Unreleased)\n$(cat $CHANGELOG_FILE_NAME)" > $CHANGELOG_FILE_NAME
      - run: |
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config user.name 'github-actions[bot]'
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md after ${{ github.ref_name }}"
          git push
